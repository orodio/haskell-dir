name: scientific
version: 0.3.3.7
id: scientific-0.3.3.7-cbcf67a66d4c09f73dcfc51f4c633059
license: BSD3
copyright:
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
stability:
homepage: https://github.com/basvandijk/scientific
package-url:
synopsis: Numbers represented using scientific notation
description: @Data.Scientific@ provides a space efficient and arbitrary precision
             scientific number type.
             .
             'Scientific' numbers are represented using
             <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>. It
             uses a coefficient @c :: 'Integer'@ and a base-10 exponent @e :: 'Int'@ (do
             note that since we're using an 'Int' to represent the exponent these numbers
             aren't truly arbitrary precision). A scientific number corresponds to the
             'Fractional' number: @'fromInteger' c * 10 '^^' e@.
             .
             The main application of 'Scientific' is to be used as the target of parsing
             arbitrary precision numbers coming from an untrusted source. The advantages
             over using 'Rational' for this are that:
             .
             * A 'Scientific' is more efficient to construct. Rational numbers need to be
             constructed using '%' which has to compute the 'gcd' of the 'numerator' and
             'denominator'.
             .
             * 'Scientific' is safe against numbers with huge exponents. For example:
             @1e1000000000 :: 'Rational'@ will fill up all space and crash your
             program. Scientific works as expected:
             .
             > > read "1e1000000000" :: Scientific
             > 1.0e1000000000
             .
             * Also, the space usage of converting scientific numbers with huge exponents to
             @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
             will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules: Data.Scientific Data.Text.Lazy.Builder.Scientific
                 Data.ByteString.Builder.Scientific
hidden-modules: Math.NumberTheory.Logarithms
trusted: False
import-dirs: /Users/orodio/haskell/hello-scotty/.cabal-sandbox/lib/x86_64-osx-ghc-7.8.4/scientific-0.3.3.7
library-dirs: /Users/orodio/haskell/hello-scotty/.cabal-sandbox/lib/x86_64-osx-ghc-7.8.4/scientific-0.3.3.7
hs-libraries: HSscientific-0.3.3.7
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.5.0.0-470385a50d2b78598af85cfe9d988e1b
         base-4.7.0.2-99f2b20e2491b27225d4c673401d826f
         bytestring-0.10.4.0-24bf0a7de9c07f7a89fd86531888919c
         deepseq-1.3.0.2-63a1ab91b7017a28bb5d04cb1b5d2d02
         ghc-prim-0.3.1.0-a24f9c14c632d75b683d0f93283aea37
         hashable-1.2.3.1-0692f475e0385ba0380d90b733d9b95c
         integer-gmp-0.5.1.0-26579559b3647acf4f01d5edd9491a46
         text-1.2.0.4-b74e536f7db6a47a372ca576aa989a5d
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /Users/orodio/haskell/hello-scotty/.cabal-sandbox/share/doc/x86_64-osx-ghc-7.8.4/scientific-0.3.3.7/html/scientific.haddock
haddock-html: /Users/orodio/haskell/hello-scotty/.cabal-sandbox/share/doc/x86_64-osx-ghc-7.8.4/scientific-0.3.3.7/html
