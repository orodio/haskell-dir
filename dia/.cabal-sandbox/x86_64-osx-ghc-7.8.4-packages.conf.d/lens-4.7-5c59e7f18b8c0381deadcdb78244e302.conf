name: lens
version: 4.7
id: lens-4.7-5c59e7f18b8c0381deadcdb78244e302
license: BSD3
copyright: Copyright (C) 2012-2014 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/4fHw3Fd.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Control.Exception.Lens Control.Lens
                 Control.Lens.At Control.Lens.Combinators Control.Lens.Cons
                 Control.Lens.Each Control.Lens.Empty Control.Lens.Equality
                 Control.Lens.Extras Control.Lens.Fold Control.Lens.Getter
                 Control.Lens.Indexed Control.Lens.Internal
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Context Control.Lens.Internal.Deque
                 Control.Lens.Internal.Exception Control.Lens.Internal.FieldTH
                 Control.Lens.Internal.PrismTH Control.Lens.Internal.Fold
                 Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
                 Control.Lens.Internal.Instances Control.Lens.Internal.Iso
                 Control.Lens.Internal.Level Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Reflection
                 Control.Lens.Internal.Review Control.Lens.Internal.Setter
                 Control.Lens.Internal.TH Control.Lens.Internal.Zoom
                 Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
                 Control.Lens.Loupe Control.Lens.Operators Control.Lens.Plated
                 Control.Lens.Prism Control.Lens.Reified Control.Lens.Review
                 Control.Lens.Setter Control.Lens.TH Control.Lens.Traversal
                 Control.Lens.Tuple Control.Lens.Type Control.Lens.Wrapped
                 Control.Lens.Zoom Control.Monad.Error.Lens
                 Control.Monad.Primitive.Lens Control.Parallel.Strategies.Lens
                 Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
                 Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.List.Split.Lens Data.Map.Lens Data.Sequence.Lens Data.Set.Lens
                 Data.Text.Lens Data.Text.Strict.Lens Data.Text.Lazy.Lens
                 Data.Tree.Lens Data.Typeable.Lens Data.Vector.Lens
                 Data.Vector.Generic.Lens Generics.Deriving.Lens GHC.Generics.Lens
                 System.Exit.Lens System.FilePath.Lens System.IO.Error.Lens
                 Language.Haskell.TH.Lens Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /Users/orodio/haskell/dia/.cabal-sandbox/lib/x86_64-osx-ghc-7.8.4/lens-4.7
library-dirs: /Users/orodio/haskell/dia/.cabal-sandbox/lib/x86_64-osx-ghc-7.8.4/lens-4.7
hs-libraries: HSlens-4.7
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.5.0.0-470385a50d2b78598af85cfe9d988e1b
         base-4.7.0.2-99f2b20e2491b27225d4c673401d826f
         bifunctors-4.2-06fc5fc0bb9053b5e2a660463d12357b
         bytestring-0.10.4.0-24bf0a7de9c07f7a89fd86531888919c
         comonad-4.2.2-d2912be863b03710c57484672c94c5af
         containers-0.5.5.1-d4bd887fb97aa3a46cbadc13709b7653
         contravariant-1.2.0.1-e17240e36e4cf6c47847c64dff13bbfc
         distributive-0.4.4-76b822549de6d016e27bb43b3fc6cb35
         exceptions-0.8-ef014d04a6dd30781ea7b86447acaafd
         filepath-1.3.0.2-25a474a9272ae6260626ce0d70ad1cab
         free-4.10.0.1-52879bc0e491283f6f9b50a96890ba8d
         ghc-prim-0.3.1.0-a24f9c14c632d75b683d0f93283aea37
         hashable-1.2.3.1-0692f475e0385ba0380d90b733d9b95c
         mtl-2.2.1-80e9dbbbee3ba38143a90be7f9812a27
         parallel-3.2.0.6-b76e67280eb83e478ad906a2d3287333
         primitive-0.5.4.0-16de88d6e87d483d63f4f882cdb55b93
         profunctors-4.3.2-74cd02f2c0dd1a2b072ef927af4396ca
         reflection-1.5.1.1-3ed6e2280f933e9a9e8fdd307fae1e08
         semigroupoids-4.2-a53fe800a8c8c48aa348811fe25ccd84
         semigroups-0.16.1-1d9bbab7c55cd1cead4ee15d7b13ccc8
         split-0.2.2-34cfb851cc3784e22bfae7a7bddda9c5
         tagged-0.7.3-4aece88b76fce3c636457239733a4dfa
         template-haskell-2.9.0.0-c0be869a24cf2c4fa8e8cbf52d0324ff
         text-1.2.0.4-b74e536f7db6a47a372ca576aa989a5d
         transformers-0.4.2.0-686fc2d26d56633b2083390fb3ada21a
         transformers-compat-0.3.3.4-57c8091ea57afec62c051eda2322cc2f
         unordered-containers-0.2.5.1-3b6dc4d99cf82556f91ddea43e16ca46
         vector-0.10.12.2-d53afe6d7f398f781121fb0abcf15757
         void-0.7-ffff35dff17c56efa71eb4dc4b6b69a8
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /Users/orodio/haskell/dia/.cabal-sandbox/share/doc/x86_64-osx-ghc-7.8.4/lens-4.7/html/lens.haddock
haddock-html: /Users/orodio/haskell/dia/.cabal-sandbox/share/doc/x86_64-osx-ghc-7.8.4/lens-4.7/html
